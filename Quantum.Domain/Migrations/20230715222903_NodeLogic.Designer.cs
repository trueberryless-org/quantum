// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quantum.Domain.Configuration;

#nullable disable

namespace Quantum.Domain.Migrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20230715222903_NodeLogic")]
    partial class NodeLogic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Quantum.Domain.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT_ID");

                    b.Property<int>("TYPE")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("NODES");

                    b.HasDiscriminator<int>("TYPE");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Description", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Node");

                    b.ToTable("NODES");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Image", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Node");

                    b.ToTable("NODES");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Page", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Node");

                    b.ToTable("NODES");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Section", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Node");

                    b.ToTable("NODES");
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Sections.Heading", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Nodes.Section");

                    b.ToTable("NODES");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Nodes.Sections.Paragraph", b =>
                {
                    b.HasBaseType("Quantum.Domain.Entities.Nodes.Section");

                    b.ToTable("NODES");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Node", b =>
                {
                    b.HasOne("Quantum.Domain.Entities.Node", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Quantum.Domain.Entities.Node", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
