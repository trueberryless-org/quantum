@page "/site"
@page "/site/{*Path}"

@using Quantum.Domain.Entities
@using Quantum.Application.Services.Interfaces
@using Quantum.Domain.Entities.Nodes

@inject INodeRepository NodeRepository
@inject NavigationManager NavigationManager


<DataInit Data="CurrentNode">
    <ChildContent Context="currentNode">

        <div class="title searchable">
            <img id="title-logo" loading="lazy" src="@currentNode.Children.FirstOrDefault(n => n is Image && n.Order == 0)?.Content" alt=""/>
            <h1>@currentNode.Content</h1>
        </div>

        <div>
            @{ var pathlink = ""; }

            @foreach (var node in PageNodes)
            {
                pathlink += node + "/";
                <a href="/site/@pathlink">@node</a>

                <span>&nbsp;/&nbsp;</span>
            }


            <div class="search_div" style="display: inline-block;">
                <form id="search_form">
                    <input
                        type="text"
                        id="search"
                        name=""
                        placeholder="Search"
                        autofocus
                        autocapitalize="none"
                        autocomplete="off"
                        autocorrect="off"/>
                </form>
                <span id="information-after"></span>
            </div>
        </div>

        <Content Node="currentNode"/>
        
    </ChildContent>
    <NoContent>
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <p>
                This page doesn't exists! Please go back to <a href="/site/Quantum">Quantum</a>!
            </p>
        </div>
    </NoContent>
</DataInit>


@code {

    [Parameter]
    public string? Path { get; set; }

    public string? TrimmedPath => Path?.Trim('/');

    // public string[] PageNodes => Path != null ? new[] { "Quantum" }.Concat(Path.Split("/")).ToArray() : new[] { "Quantum" };

    public string[] PageNodes => Path?.Split("/");

    public Node? CurrentNode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentNode();
    }

    public async Task LoadCurrentNode()
    {
        if (Path == null)
            NavigationManager.NavigateTo("/site/Quantum");

        var allNodes = await NodeRepository.ReadAsync();

        @foreach (var node in PageNodes)
        {
            CurrentNode = allNodes.FirstOrDefault(
                n => n is Page &&
                     n.Content == node &&
                     n.ParentId == CurrentNode?.Id);
        }

        if (CurrentNode != null)
            CurrentNode = await NodeRepository.IncludeChildren(CurrentNode, 2);
    }

    // TODO: StateHasChanged when redirect

}